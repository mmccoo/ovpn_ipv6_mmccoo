#!/usr/bin/perl

use warnings;
use strict;
use File::Copy;
use Cwd 'abs_path';
use File::Basename;

# this script and comments assume you've run:
# apt install -y openvpn easy-rsa emacs24 traceroute
# wget https://git.io/vpn -O openvpn-install.sh
# bash ./openvpn-install.sh

# you'll probably want firewall protection. ufw is available on ubuntu.
# some commands/settings you might consider.
# sudo ufw allow ssh/tcp  # otherwise you won't be able to ssh to your server
# sudo ufw allow 1194/udp # otherwise you won't be able to initiate contact with your vpn
#                         # even without ipv6 support, you have to have this.

# this is a good site on ufw
# https://wiki.ubuntu.com/UncomplicatedFirewall

# I'm not a networking expert. I just wanted a openvpn server that handled ipv6.
# to understand what's going on here, it really helps to understand ipv6 a little.
# I found the wikipedia article helpful.
# https://en.wikipedia.org/wiki/IPv6#Addressing

# ipv6 is different from ipv4 in an important way. In ipv4, you get one ip address.
# your router then will forward appropriate ports.
# with ipv6, you generally get a large set (4 billion) of addresses.
# aaaa:bbbb:cccc:dddd::/64. The final :: means "fill as many zeros as needed to get 128bits"

# so when configuring the openvpn server, we use a subnet of the 4 billion address we're given.
# the server address will be the a:b:c:d prefix, followed by 80. 

# here I try to find out the main network interface (ens3, eth0...)
# as well as the ipv6/64 prefix
# ip -6 route may be a better way to get this information.
my $intf;
my $netprefix;
my $relevant;

my $ifconf = `ifconfig -a`;
foreach my $line (split(/\n/, $ifconf)) {
    #print($line, "\n");
    chomp $line;

    my ($intname) = ($line =~ /^([a-zA-Z0-9]+)/);
    if (defined($intname)) {
        $relevant = 0;
        
        if (grep(/tun|lo/, $intname)) { next; }
        
        if (defined($intf)) {
            printf("warning multiple interfaces found %s, %s\n", $intf, $intname);
            printf("assuming the first one found %s\n", $intf);
        } else {
            $intf = $intname;
            printf("found interface %s\n", $intf);
            $relevant = 1;
        }
    }

    # skip if I'm not in a relevant section. Ie not in a tun or lo
    # also skip if in a second interface.
    next unless ($relevant);
    
    
    my ($foundipv6) = ($line =~ /inet6 addr: ([0-9a-fA-F:]+)/);
    # I take the first one. There are usually
    # more, but the first one is the correct one on my machines.
    if (defined($foundipv6) && !defined($netprefix)) {
        if (!($line =~ /Scope:Global/)) { next; }
        my @foundipv6 = split(/:/, $foundipv6);
        $netprefix = join(":", @foundipv6[0..3]);
        printf("using ipv6 %s\n", $netprefix);
    }

}

# this script assumes you're starting with an openvpn config generated by:
# wget https://git.io/vpn -O openvpn-install.sh
# bash ./openvpn-install.sh

# so you should already have a config that works for ipv4.
# if you do
#   ping google.com
# it should work
# if you do
# traceroute google.com
# it should give a route whose first jump is 10.8.0.1

# if you do ping6, it'll work, but further digging with
# traceroute -6 google.com
# will show that traffic is not going through your server.

# so only some of your traffic is made private.

# down below, the script ndp-proxy-setup.sh will need to run as root.
# the openvpn-install.sh uses user nobody. We need to change that to user vpn
system("useradd -r -s /bin/false vpn");
system("chown vpn /etc/openvpn/crl.pem");

# using a trick learned here:
# https://stackoverflow.com/a/28382838
system("echo 'vpn ALL=NOPASSWD: /etc/openvpn/ndp-proxy-setup.sh' | EDITOR='tee -a' visudo");


if (-e "/etc/openvpn/server.conf.preipv6") {
    print("/etc/openvpn/server.conf.preipv6 already exists. Already ran this script?\n");
} else {
    copy("/etc/openvpn/server.conf", "/etc/openvpn/server.conf.preipv6");

    if (open(my $fp, ">>", "/etc/openvpn/server.conf")) {
	# openvpn should give a ipv6 address to the client's tun
        printf($fp "server-ipv6 %s:80::/112\n",              $netprefix);

	# to get to other clients on the vpn, tell the client to route through the tunnel
        printf($fp "push \"route-ipv6 %s:80::/112\"\n",  $netprefix);

	# dns requests should go to vpn server
        printf($fp "push \"dhcp6-option DNS %s:80::1\"\n", $netprefix);
        printf($fp "tun-ipv6\n");
        printf($fp "proto udp6\n");

	# I find it helpful to look openvpn stuff.
	printf($fp "log \"/etc/openvpn/openvpn.log\"\n");
	
        # https://community.openvpn.net/openvpn/wiki/IPv6
        # To redirect all Internet-bound traffic, use the current 
        # allocated public IP space like this:
        printf($fp "push \"route-ipv6 2000::/3\"\n");

	# when openvpn has decided what ip address to give the client, it'll call this script.
	# the contents of the script are described further down.
	# need to change user to vpn to enable running ndp-proxy-setup with sudo
	printf($fp "user vpn\n");
	printf($fp "learn-address \"/usr/bin/sudo -u root /etc/openvpn/ndp-proxy-setup.sh\"\n");
        
        close($fp);
    } else {
        print("can't open server.conf.preipv6 for append\n");
    }
}


# in this section, I'm uncommenting AUTOSTART=all because otherwise,
# 'service openvpn restart' doesn't actually restart openvpn.
# https://a20.net/bert/2016/09/27/openvpn-client-connection-not-started-on-ubuntu-16-04/
open(my $fp, "<", "/etc/default/openvpn") || die("can't open /etc/default/openvpn\n");
my @lines = readline($fp);
close($fp);

if (open(my $fp, ">", "/etc/default/openvpn")) {
    foreach my $line (@lines) {
        $line =~ s/#AUTOSTART="all"/AUTOSTART="all"/;
        print($fp $line);
    }
}
# reload systcl changes just made.
print("reloadeing deamon\n");
system("systemctl daemon-reload");

# for the comments below, until I get to the firewall portion, I assume that the firewall
# is disabled:
# ufw disable
# I've found it helpful to debug with firewall off.


# at this point, you could restart openvpn
# service openvpn restart
# if you were to do that without the stuff below, the client would get a ipv6 address on tun
# and it would route all traffic to the openvpn tunnel.
#
# but nothing would come back.
#
# if you do:
# traceroute -6 google.com
# you'd get:
# traceroute to google.com (2607:f8b0:4006:810::200e), 30 hops max, 80 byte packets
#    1  * * *
#    2  * * *
#    3  * * *
#    ...
#
# not what we want.       

# I don't understand the next section, but I've found that this will
# enable the first traceroute jump:
    
open($fp, "<", "/etc/sysctl.conf") || die("can't open /etc/sysctl.conf\n");
@lines = readline($fp);
close($fp);

if (open(my $fp, ">", "/etc/sysctl.conf")) {
    foreach my $line (@lines) {
	$line =~ s/#net.ipv6.conf.all.forwarding=1/net.ipv6.conf.all.forwarding=1/;
	$line =~ s/#net.ipv6.conf.all.accept_redirects = 0/net.ipv6.conf.all.accept_redirects = 0/;
	print($fp $line);
    }
    print($fp "net.ipv6.conf.all.proxy_ndp = 1\n");
    close($fp);

    # reparse sysctl stuff.
    system("sysctl -p");

}


# if you were to restart networking (i'm waiting til the end of this script)
# /etc/init.d/networking restart
# we would get this:
#traceroute to google.com (2607:f8b0:4006:810::200e), 30 hops max, 80 byte packets
#    1  2001:19f0:5401:3c3::1 (2001:19f0:5401:3c3::1)  135.716 ms  136.885 ms  136.902 ms
#    2  * * *
#    3  * * *
#
# So at this point, we'd know that client requests show up on the server and are able to
# exit openvpn. The address above is my server's address, not the :80 address that the openvpn
# tunnel gets.
#
# but still not functional.

# if you're still getting * * * at this point, one thing to look at is whether the connection really
# finished initializing. One thing that happened to me is that the 'learn address' part was failing
# due to permissions. Commenting the learn line in server.conf enabled my setup to complete (minus the learn
# step, but other stuff did finish.

# I'm guessing that there's a way to do the next step directly in the routing table.
# The following is lifted from this thread:
# https://forums.openvpn.net/viewtopic.php?t=21051
# in particular the post by ybk

# in the post, there's a section that runs this for a hundred different addresses:
# ip neigh add proxy Prefix_64:8000::$(printf %x $i) dev eth0

# in my case, if I were to do:
# ip neigh add proxy 2001:19f0:5401:3c3:80::1000 dev ens3
# then I'd have a functional vpn including ipv6 goodness. 
# (for example, I'm able to listen to pandora from here in Germany)

# this next section is based off of this (German) post:
# https://www.techgrube.de/tutorials/openvpn-server-mit-ipv4-und-ipv6

my $proxy_script = dirname(abs_path($0)) . "/ndp-proxy-setup.sh";
if (open($fp, "<", $proxy_script)) {
    @lines = readline($fp);
    close($fp);

    open($fp, ">", "/etc/openvpn/ndp-proxy-setup.sh");
    foreach my $line (@lines) {
	$line =~ s/__server_wan_interface/$intf/;
	print($fp $line);
    }
    close($fp);
    system("chmod +x /etc/openvpn/ndp-proxy-setup.sh");
} else {
    printf("unable to open file %s\n", $proxy_script);
}

# up to here, the code and comments assume you've turned the
# firewall off via:
# ufw disable

# if you do:
#    ufw allow 1194/udp
# things sort of work. pinging to google works
# ping6 google.com
# traceroute -6 google.com
# does not work.

# the code below is basically a copy of the commands on this site:
# https://www.techgrube.de/tutorials/openvpn-server-mit-ipv4-und-ipv6

system("iptables -t nat -A POSTROUTING -o $intf -j MASQUERADE");
system("ip6tables -A INPUT -i lo -j ACCEPT");
system("ip6tables -A INPUT -m conntrack --ctstate INVALID -j DROP");
system("ip6tables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT");
system("ip6tables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT");
system("ip6tables -A INPUT -p ipv6-icmp -j ACCEPT");
system("ip6tables -A FORWARD -p ipv6-icmp -j ACCEPT");
system("ip6tables -A FORWARD -s ${netprefix}::/64 -j ACCEPT");
system("ip6tables -A INPUT -j REJECT");

system("iptables-save > /etc/iptables.vpn.rules");
system("ip6tables-save > /etc/ip6tables.vpn.rules");

open($fp, ">", "/etc/network/if-up.d/iptables");
print($fp <<EOF);
#!/bin/sh
iptables-restore < /etc/iptables.vpn.rules
ip6tables-restore < /etc/ip6tables.vpn.rules
EOF
close($fp);
system("chmod +x /etc/network/if-up.d/iptables");



# end
